### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AccountFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

input AccountWhereInput {
  access_token: NullableStringFilter
  access_token_expires: NullableDateTimeFilter
  AND: [AccountWhereInput!]
  compound_id: StringFilter
  created_at: DateTimeFilter
  id: IntFilter
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  provider_account_id: StringFilter
  provider_id: StringFilter
  provider_type: StringFilter
  refresh_token: NullableStringFilter
  updated_at: DateTimeFilter
  user_id: StringFilter
  users: UserWhereInput
}

"""An artist, trainee or dancer"""
type Artist {
  """Artist's age, null if the birth date is not known."""
  age: Int
  birthDate: DateTime

  """Artist's korean age, null if the birth date is not known."""
  koreanAge: Int

  """The name an artist as commonly known by"""
  stageName: String
}

input ArtistAliasFilter {
  every: ArtistAliasWhereInput
  none: ArtistAliasWhereInput
  some: ArtistAliasWhereInput
}

input ArtistAliasWhereInput {
  alias: StringFilter
  AND: [ArtistAliasWhereInput!]
  artists: ArtistWhereInput
  created_at: DateTimeFilter
  id: IntFilter
  idol_id: IntFilter
  NOT: [ArtistAliasWhereInput!]
  OR: [ArtistAliasWhereInput!]
  updated_at: DateTimeFilter
}

input ArtistFilter {
  every: ArtistWhereInput
  none: ArtistWhereInput
  some: ArtistWhereInput
}

input ArtistWhereInput {
  aliases: ArtistAliasFilter
  AND: [ArtistWhereInput!]
  banner: mediaWhereInput
  banner_id: NullableIntFilter
  birth_city: NullableStringFilter
  birth_date: NullableDateTimeFilter
  birth_date_precision: NullableStringFilter
  blood_type: NullableStringFilter
  country_of_origin: NullableStringFilter
  created_at: NullableDateTimeFilter
  description: NullableStringFilter
  full_name: NullableStringFilter
  gender: NullableStringFilter
  genders: gendersWhereInput
  group: GroupWhereInput
  group_members: GroupMemberFilter
  height: NullableIntFilter
  id: IntFilter
  image: mediaWhereInput
  image_id: NullableIntFilter
  instagram_username: NullableStringFilter
  korean_stage_name: NullableStringFilter
  melon_id: NullableIntFilter
  native_name: NullableStringFilter
  NOT: [ArtistWhereInput!]
  OR: [ArtistWhereInput!]
  primary_group_id: NullableIntFilter
  stage_name: NullableStringFilter
  thumbnail: NullableStringFilter
  twitter_handle: NullableStringFilter
  updated_at: NullableDateTimeFilter
  weight: NullableIntFilter
  youtube_id: NullableStringFilter
}

input ArtistWhereUniqueInput {
  id: Int
  melon_id: Int
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  created_at: DateTimeFilter
  defunct_date: NullableDateTimeFilter
  defunct_date_precision: NullableStringFilter
  founded_date: NullableDateTimeFilter
  founded_date_precision: NullableStringFilter
  group_companies: GroupCompanyFilter
  groups: GroupFilter
  id: IntFilter
  logo: NullableStringFilter
  name: StringFilter
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  updated_at: NullableDateTimeFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input gendersWhereInput {
  AND: [gendersWhereInput!]
  comment: StringFilter
  gender: StringFilter
  idols: ArtistFilter
  NOT: [gendersWhereInput!]
  OR: [gendersWhereInput!]
}

"""A group or solo act"""
type Group {
  companyName: String
  createdAt: DateTime
  debutDate: DateTime
  debutDatePrecision: String
  description: String
  disbandDate: DateTime
  disbandDatePrecision: String
  discordServerId: String
  facebookUsername: String
  fanCafeId: String
  fandomName: String
  gender: GroupGender!
  id: Int!
  instagramUsername: String
  isSubunit: Boolean!
  koreanName: String!
  likeCount: Int!
  likedBy: [User!]!
  members(cursor: GroupMemberWhereUniqueInput, skip: Int, take: Int): [GroupMember!]!
  name: String!
  parentGroup: Group
  spotifyId: String
  status: GroupStatus!
  subunits(cursor: GroupWhereUniqueInput, skip: Int, take: Int): [Group!]!
  tiktokUsername: String
  type: String
  updatedAt: DateTime
  vliveId: String
  websiteUrl: String
  youtubeId: String
}

input Group_members_group_id_idol_id_keyCompoundUniqueInput {
  group_id: Int!
  idol_id: Int!
}

input group_statusWhereInput {
  AND: [group_statusWhereInput!]
  comment: StringFilter
  groups: GroupFilter
  NOT: [group_statusWhereInput!]
  OR: [group_statusWhereInput!]
  status: StringFilter
}

input GroupAliasFilter {
  every: GroupAliasWhereInput
  none: GroupAliasWhereInput
  some: GroupAliasWhereInput
}

input GroupAliasWhereInput {
  alias: StringFilter
  AND: [GroupAliasWhereInput!]
  created_at: NullableDateTimeFilter
  group_id: IntFilter
  groups: GroupWhereInput
  NOT: [GroupAliasWhereInput!]
  OR: [GroupAliasWhereInput!]
  updated_at: NullableDateTimeFilter
}

input GroupCompanyFilter {
  every: GroupCompanyWhereInput
  none: GroupCompanyWhereInput
  some: GroupCompanyWhereInput
}

input GroupCompanyWhereInput {
  AND: [GroupCompanyWhereInput!]
  comment: NullableStringFilter
  companies: CompanyWhereInput
  company_id: IntFilter
  end_date: NullableDateTimeFilter
  group_id: IntFilter
  groups: GroupWhereInput
  id: IntFilter
  NOT: [GroupCompanyWhereInput!]
  OR: [GroupCompanyWhereInput!]
  reference_url: NullableStringFilter
  start_date: DateTimeFilter
}

input GroupFilter {
  every: GroupWhereInput
  none: GroupWhereInput
  some: GroupWhereInput
}

enum GroupGender {
  """A group with all male members"""
  BOY_BAND

  """
  A group with a mixed gender composition. Note: if ever applicable, groups with non-binary
  group members are considered co-ed
  """
  COED

  """A group with all female members"""
  GIRL_GROUP

  """
  A group with an unknown gender composition. Usually means
  there are no members in the group.
  """
  UNKNOWN
}

input GroupHiatusFilter {
  every: GroupHiatusWhereInput
  none: GroupHiatusWhereInput
  some: GroupHiatusWhereInput
}

input GroupHiatusWhereInput {
  AND: [GroupHiatusWhereInput!]
  end_date: NullableDateTimeFilter
  group: GroupWhereInput
  group_id: IntFilter
  id: IntFilter
  NOT: [GroupHiatusWhereInput!]
  OR: [GroupHiatusWhereInput!]
  reference_url: StringFilter
  start_date: DateTimeFilter
}

"""An artist's future, current or past relationship with a group"""
type GroupMember {
  artist: Artist!
  group: Group!
}

input GroupMemberFilter {
  every: GroupMemberWhereInput
  none: GroupMemberWhereInput
  some: GroupMemberWhereInput
}

input GroupMemberRoleFilter {
  every: GroupMemberRoleWhereInput
  none: GroupMemberRoleWhereInput
  some: GroupMemberRoleWhereInput
}

input GroupMemberRoleWhereInput {
  AND: [GroupMemberRoleWhereInput!]
  group_members: GroupMemberWhereInput
  id: IntFilter
  member_id: IntFilter
  NOT: [GroupMemberRoleWhereInput!]
  OR: [GroupMemberRoleWhereInput!]
  role_name: StringFilter
}

input GroupMemberWhereInput {
  AND: [GroupMemberWhereInput!]
  artist: ArtistWhereInput
  created_at: NullableDateTimeFilter
  departure_date: NullableDateTimeFilter
  departure_date_precision: NullableStringFilter
  group: GroupWhereInput
  group_id: IntFilter
  group_member_roles: GroupMemberRoleFilter
  id: IntFilter
  idol_id: IntFilter
  join_date: NullableDateTimeFilter
  join_date_precision: NullableStringFilter
  NOT: [GroupMemberWhereInput!]
  OR: [GroupMemberWhereInput!]
  updated_at: NullableDateTimeFilter
}

input GroupMemberWhereUniqueInput {
  group_id: Int
  group_members_group_id_idol_id_key: Group_members_group_id_idol_id_keyCompoundUniqueInput
  id: Int
}

input GroupOrderByInput {
  banner_id: OrderByArg
  company_name: OrderByArg
  created_at: OrderByArg
  debut_date: OrderByArg
  debut_date_precision: OrderByArg
  description: OrderByArg
  disband_date: OrderByArg
  disband_date_precision: OrderByArg
  discord_server_id: OrderByArg
  facebook_username: OrderByArg
  fan_cafe_id: OrderByArg
  fandom_name: OrderByArg
  id: OrderByArg
  image_id: OrderByArg
  instagram_username: OrderByArg
  korean_name: OrderByArg
  melon_id: OrderByArg
  name: OrderByArg
  parent_group_id: OrderByArg
  spotify_id: OrderByArg
  status: OrderByArg
  tiktok_username: OrderByArg
  twitter_handle: OrderByArg
  type: OrderByArg
  updated_at: OrderByArg
  vlive_id: OrderByArg
  website_url: OrderByArg
  youtube_id: OrderByArg
}

enum GroupStatus {
  """A group or solo act that is currently active."""
  ACTIVE

  """A group or solo act that has officially disbanded."""
  DISBANDED

  """
  A group or solo act that has set an official date for disbanding
  but hasn't disbanded
  """
  DISBANDING

  """A group or solo act that is current on an officially confirmed hiatus."""
  HIATUS

  """
  A group or solo artist that has a debut date set but has not yet debuted.
  """
  PRE_DEBUT
}

enum GroupType {
  """A group with more than 1 member"""
  GROUP

  """
  A solo project with only 1 member. Also applies to groups that turned into solo projects
  after being a group like Bolbbalgan4.
  """
  SOLO
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  banner: mediaWhereInput
  banner_id: NullableIntFilter
  companies: CompanyWhereInput
  company_name: NullableStringFilter
  created_at: NullableDateTimeFilter
  debut_date: NullableDateTimeFilter
  debut_date_precision: NullableStringFilter
  description: NullableStringFilter
  disband_date: NullableDateTimeFilter
  disband_date_precision: NullableStringFilter
  discord_server_id: NullableStringFilter
  facebook_username: NullableStringFilter
  fan_cafe_id: NullableStringFilter
  fandom_name: NullableStringFilter
  group_aliases: GroupAliasFilter
  group_companies: GroupCompanyFilter
  group_hiatuses: GroupHiatusFilter
  group_members: GroupMemberFilter
  group_status: group_statusWhereInput
  id: IntFilter
  idols: ArtistFilter
  image: mediaWhereInput
  image_id: NullableIntFilter
  instagram_username: NullableStringFilter
  korean_name: StringFilter
  melon_id: NullableIntFilter
  name: StringFilter
  NOT: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  parent_group: GroupWhereInput
  parent_group_id: NullableIntFilter
  releases: ReleaseFilter
  songs: SongFilter
  spotify_id: NullableStringFilter
  status: StringFilter
  subunits: GroupFilter
  tiktok_username: NullableStringFilter
  twitter_handle: NullableStringFilter
  type: NullableStringFilter
  updated_at: NullableDateTimeFilter
  user_group_likes: UserGroupLikeFilter
  vlive_id: NullableStringFilter
  website_url: NullableStringFilter
  youtube_id: NullableStringFilter
}

input GroupWhereUniqueInput {
  id: Int
  melon_id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input mediaWhereInput {
  AND: [mediaWhereInput!]
  created_at: DateTimeFilter
  groups_groups_banner_idTomedia: GroupFilter
  groups_groups_image_idTomedia: GroupFilter
  id: IntFilter
  idols_idols_banner_idTomedia: ArtistFilter
  idols_idols_image_idTomedia: ArtistFilter
  lg: NullableStringFilter
  md: NullableStringFilter
  NOT: [mediaWhereInput!]
  object_position_x: IntFilter
  object_position_y: IntFilter
  OR: [mediaWhereInput!]
  original_url: NullableStringFilter
  releases: ReleaseFilter
  slug: StringFilter
  sm: NullableStringFilter
  updated_at: NullableDateTimeFilter
  users_mediaTousers_avatar_id: UserFilter
  users_mediaTousers_banner_id: UserFilter
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  artist(where: ArtistWhereUniqueInput!): Artist
  artists(cursor: ArtistWhereUniqueInput, skip: Int, take: Int): [Artist!]!
  group(where: GroupWhereUniqueInput!): Group
  groups(cursor: GroupWhereUniqueInput, orderBy: GroupOrderByInput, skip: Int, take: Int, where: GroupWhereInput): [Group!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int): [User!]!
}

input release_typesWhereInput {
  AND: [release_typesWhereInput!]
  comment: StringFilter
  NOT: [release_typesWhereInput!]
  OR: [release_typesWhereInput!]
  releases: ReleaseFilter
  type: StringFilter
}

input ReleaseFilter {
  every: ReleaseWhereInput
  none: ReleaseWhereInput
  some: ReleaseWhereInput
}

input ReleaseSongFilter {
  every: ReleaseSongWhereInput
  none: ReleaseSongWhereInput
  some: ReleaseSongWhereInput
}

input ReleaseSongWhereInput {
  AND: [ReleaseSongWhereInput!]
  created_at: NullableDateTimeFilter
  date_added: NullableDateTimeFilter
  group_id: IntFilter
  is_title_track: BooleanFilter
  NOT: [ReleaseSongWhereInput!]
  OR: [ReleaseSongWhereInput!]
  release_id: IntFilter
  releases: ReleaseWhereInput
  song_id: IntFilter
  songs: SongWhereInput
  updated_at: NullableDateTimeFilter
}

input ReleaseWhereInput {
  album_cover: NullableStringFilter
  album_cover_id: NullableIntFilter
  AND: [ReleaseWhereInput!]
  cover: mediaWhereInput
  created_at: NullableDateTimeFilter
  description: NullableStringFilter
  genre: NullableStringFilter
  group_id: IntFilter
  groups: GroupWhereInput
  id: IntFilter
  melon_id: NullableIntFilter
  name: StringFilter
  NOT: [ReleaseWhereInput!]
  OR: [ReleaseWhereInput!]
  release_date: NullableDateTimeFilter
  release_date_precision: StringFilter
  release_songs: ReleaseSongFilter
  release_types: release_typesWhereInput
  songs: SongFilter
  spotify_id: NullableStringFilter
  type: StringFilter
  updated_at: NullableDateTimeFilter
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  role_name: StringFilter
  user_roles: UserRoleFilter
}

input SongFilter {
  every: SongWhereInput
  none: SongWhereInput
  some: SongWhereInput
}

input SongWhereInput {
  AND: [SongWhereInput!]
  created_at: NullableDateTimeFilter
  group_id: IntFilter
  groups: GroupWhereInput
  id: IntFilter
  korean_name: NullableStringFilter
  language: StringFilter
  length: NullableIntFilter
  melon_id: NullableIntFilter
  mv_link: NullableStringFilter
  name: NullableStringFilter
  NOT: [SongWhereInput!]
  OR: [SongWhereInput!]
  release_id: IntFilter
  release_songs: ReleaseSongFilter
  releases: ReleaseWhereInput
  spotify_link: NullableStringFilter
  updated_at: NullableDateTimeFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

input SubmissionFilter {
  every: SubmissionWhereInput
  none: SubmissionWhereInput
  some: SubmissionWhereInput
}

input SubmissionWhereInput {
  AND: [SubmissionWhereInput!]
  comment: NullableStringFilter
  created_at: DateTimeFilter
  id: IntFilter
  NOT: [SubmissionWhereInput!]
  OR: [SubmissionWhereInput!]
  updated_at: DateTimeFilter
  user_id: NullableStringFilter
  users: UserWhereInput
}

type User {
  banned: Boolean!
  bio: String
  createdAt: DateTime!
  locale: String
  profileLink: String!
  slug: String
  username: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserGroupLikeFilter {
  every: UserGroupLikeWhereInput
  none: UserGroupLikeWhereInput
  some: UserGroupLikeWhereInput
}

input UserGroupLikeWhereInput {
  AND: [UserGroupLikeWhereInput!]
  created_at: DateTimeFilter
  group_id: IntFilter
  groups: GroupWhereInput
  id: IntFilter
  NOT: [UserGroupLikeWhereInput!]
  OR: [UserGroupLikeWhereInput!]
  updated_at: DateTimeFilter
  user_id: StringFilter
  users: UserWhereInput
}

input UserOrderByInput {
  avatar_id: OrderByArg
  banned: OrderByArg
  banner_id: OrderByArg
  bio: OrderByArg
  created_at: OrderByArg
  discord_user_id: OrderByArg
  discord_username: OrderByArg
  email: OrderByArg
  email_verified: OrderByArg
  id: OrderByArg
  image: OrderByArg
  locale: OrderByArg
  password_hash: OrderByArg
  slug: OrderByArg
  twitter_user_id: OrderByArg
  updated_at: OrderByArg
  username: OrderByArg
}

input UserRefreshTokenFilter {
  every: UserRefreshTokenWhereInput
  none: UserRefreshTokenWhereInput
  some: UserRefreshTokenWhereInput
}

input UserRefreshTokenWhereInput {
  AND: [UserRefreshTokenWhereInput!]
  created_at: DateTimeFilter
  expires_in: DateTimeFilter
  id: IntFilter
  is_valid: BooleanFilter
  NOT: [UserRefreshTokenWhereInput!]
  OR: [UserRefreshTokenWhereInput!]
  updated_at: NullableDateTimeFilter
  user_id: StringFilter
  users: UserWhereInput
}

input UserRoleFilter {
  every: UserRoleWhereInput
  none: UserRoleWhereInput
  some: UserRoleWhereInput
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  created_at: DateTimeFilter
  id: IntFilter
  NOT: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  role: StringFilter
  roles: RoleWhereInput
  user_id: StringFilter
  users: UserWhereInput
}

input UserWhereInput {
  accounts: AccountFilter
  AND: [UserWhereInput!]
  avatar: mediaWhereInput
  avatar_id: NullableIntFilter
  banned: BooleanFilter
  banner: mediaWhereInput
  banner_id: NullableIntFilter
  bio: NullableStringFilter
  created_at: DateTimeFilter
  discord_user_id: NullableStringFilter
  discord_username: NullableStringFilter
  email: StringFilter
  email_verified: NullableBooleanFilter
  id: StringFilter
  image: NullableStringFilter
  locale: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password_hash: NullableStringFilter
  slug: NullableStringFilter
  submissions: SubmissionFilter
  twitter_user_id: NullableStringFilter
  updated_at: DateTimeFilter
  user_group_likes: UserGroupLikeFilter
  user_refresh_tokens: UserRefreshTokenFilter
  user_roles: UserRoleFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  slug: String
}
